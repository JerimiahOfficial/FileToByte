#include "FTB.hpp"

const char* byte_to_hex_lookup_table = "0123456789abcdef";

namespace FileToByte {
	std::string Convert(std::string Path, std::string VarName) {
		if (!std::filesystem::exists(Path))
			return "";

		std::vector<char> buffer;
		std::ifstream file(Path, std::ios::binary);

		if (!file.is_open())
			return "";

		file.seekg(0, std::ios::end);
		buffer.reserve((const unsigned int)file.tellg());
		file.seekg(0, std::ios::beg);
		buffer.insert(buffer.begin(), std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>());
		file.close();

		std::string fileHeader = "#pragma once\n\n/*\n *\tGenerated by File To Byte\n *\thttps://github.com/JerimiahOfficial/FileToByte\n */\n\nstatic const unsigned int " + VarName + "[/*" + std::to_string(buffer.size()) + "*/] = {\n\t";
		std::string fileContents = "";
		
		for (size_t i = 0; i < buffer.size(); i++) {
			fileContents += "0x" + std::string(1, byte_to_hex_lookup_table[(buffer[i] & 0xF0) >> 4]) + std::string(1, byte_to_hex_lookup_table[buffer[i] & 0x0F]);

			if (i != buffer.size() - 1)
				fileContents += ", ";

			if ((i + 1) % 15 == 0 && i != 0 && i != buffer.size() - 1)
				fileContents += "\n\t";
		}
		
		return fileHeader + fileContents + "\n};";
	}
}
