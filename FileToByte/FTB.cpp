#include "FTB.h"
#include "Globals.h"

#pragma warning(disable : 4996)
auto byte_to_hex_lookup_table = "0123456789abcdef";

namespace FileToByte {
	void OutputResult(std::vector<char> buffer) {
		std::vector<char> Result(buffer.size() * 6 + (buffer.size() / 25) * 2 + 1024 * 5, '\0');
		int counter = 0, pos = 0;
		pos += std::sprintf(&Result[pos], "#pragma once\n\n/*\n *\tGenerated by File To Byte\n *\thttps://github.com/JerimiahOfficial/FileToByte\n */\n\nunsigned char %s[/*%zu*/] = {\n\t", Globals::VarName, buffer.size());

		for (unsigned char b : buffer) {
			Result[pos++] = '0';
			Result[pos++] = 'x';
			Result[pos++] = byte_to_hex_lookup_table[(b >> 4) & 0xf];
			Result[pos++] = byte_to_hex_lookup_table[b & 0xf];
			Result[pos++] = ',';
			Result[pos++] = ' ';

			counter++;

			if (counter == 25) {
				Result[pos++] = '\n';
				Result[pos++] = '\t';
				counter = 0;
			}
		}
		
		pos += std::sprintf(&Result[pos], "\n};");
		Globals::res = std::string(Result.data(), pos + 1ull);
	}

	void Convert(std::string val) {
		bool exists = std::filesystem::exists(val);

		if (!exists)
			return;

		std::ifstream FileBuffer(val, std::ios_base::binary);
		std::vector<char> buffer{ std::istreambuf_iterator<char>(FileBuffer), std::istreambuf_iterator<char>() };

		[[maybe_unused]] auto ignored = std::async(std::launch::async, OutputResult, buffer);

		FileBuffer.close();
	}
}